% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/render_tonemap.R
\name{render_tonemap}
\alias{render_tonemap}
\title{Filmic Tonemapping}
\usage{
render_tonemap(
  image = NULL,
  method = "aces",
  exposure = 0,
  reinhard_key = 0.18,
  reinhard_white = NULL,
  desaturate = 0,
  clamp_output = TRUE,
  preserve_alpha = TRUE,
  filename = NULL,
  preview = FALSE
)
}
\arguments{
\item{image}{Default \code{NULL}. 3-layer RGB/4-layer RGBA array, \code{rayimg} class, or filename of an image.}

\item{method}{Default \code{aces}. Tonemapper to apply. Options: \code{aces}, \code{hable} (a.k.a. \code{uncharted2}), \code{reinhard}.}

\item{exposure}{Default \code{0}. Exposure offset in stops (pre-tonemap). Final scale is \code{2^exposure}.}

\item{reinhard_key}{Default \code{0.18}. Key value for \code{method="reinhard"} (middle-gray).}

\item{reinhard_white}{Default \code{NULL}. Optional white point (luminance) for \code{method="reinhard"}. If \code{NULL}, uses basic Reinhard without white compression.}

\item{desaturate}{Default \code{0}. Amount in \verb{[0,1]} to blend toward grayscale \emph{after} tonemapping to curb oversaturation.}

\item{clamp_output}{Default \code{TRUE}. Clamp output RGB to \verb{[0,1]} after tonemapping.}

\item{preserve_alpha}{Default \code{TRUE}. Keep alpha channel unchanged if present.}

\item{filename}{Default \code{NULL}. If provided, write a PNG to this filename (appends \code{.png} if needed). Otherwise plot or return.}

\item{preview}{Default \code{FALSE}. Whether to plot the tonemapped image or just return the data.}
}
\value{
A \code{rayimg} RGBA array with display-ready values (gamma follows input metadata).
}
\description{
Applies a filmic tonemapping operator to an HDR image in linear RGB.
}
\examples{
if(run_documentation()){
plot_image(dragon)
}
if(run_documentation()){
render_tonemap(dragon, method = "aces", exposure = 0) |>
 plot_image()
}
if(run_documentation()){
# Hable/Uncharted2 filmic curve
render_tonemap(dragon, method = "hable",exposure=2) |>
 plot_image()
}
if(run_documentation()){
# Reinhard with key/white point controls
render_tonemap(dragon, method = "reinhard", reinhard_key = 0.18, reinhard_white = 10) |>
 plot_image()
}
}
